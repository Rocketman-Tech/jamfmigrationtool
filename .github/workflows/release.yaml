name: Build and Release JamfMigrationTool

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build JamfMigrationTool
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Import developer id installer certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.INSTALLER_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
          keychain: build
          keychain-password: "temp-password"

      - name: Import developer id application certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATE_P12 }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
          create-keychain: false
          keychain: build
          keychain-password: "temp-password"

      - name: Build the project
        run: |
          xcodebuild -scheme JamfMigrationTool -configuration Release clean build CODE_SIGN_IDENTITY='Developer ID Application' CODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO OTHER_CODE_SIGN_FLAGS='--timestamp' -derivedDataPath build

      - name: Create package directory structure
        run: |
          rm -rf package-root
          mkdir -p package-root/usr/local/bin
          mkdir -p "package-root/Library/Application Support/Rocketman"

          cp build/Build/Products/Release/JamfMigrationTool package-root/usr/local/bin/
          cp "resources/funcfi-logo-small.png" "package-root/Library/Application Support/Rocketman/funcfi-logo-small.png"

          mkdir -p scripts
          echo '#!/bin/bash
          /usr/local/bin/JamfMigrationTool
          exit 0' > scripts/postinstall
          chmod +x scripts/postinstall

      - name: Create unsigned package
        run: |
          pkgbuild \
            --root "package-root" \
            --scripts scripts \
            --install-location "/" \
            --identifier "tech.rocketman.jamfmigrationtool" \
            --version "${{ github.ref_name }}" \
            "JamfMigrationTool-${{ github.ref_name }}-unsigned.pkg"

      - name: Create signed package
        run: |
          pkgbuild \
            --root "package-root" \
            --scripts scripts \
            --install-location "/" \
            --identifier "tech.rocketman.jamfmigrationtool" \
            --version "${{ github.ref_name }}" \
            --sign "${{ secrets.APPLE_INSTALLER_SIGNING_IDENTITY }}" \
            "JamfMigrationTool-${{ github.ref_name }}.pkg"

      - name: Verify Signature
        run: |
          pkgutil --check-signature "JamfMigrationTool-${{ github.ref_name }}.pkg"

      - name: Notarize package
        id: notarize
        continue-on-error: true
        run: |
          xcrun notarytool store-credentials "notarytool-profile" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_APP_PASSWORD }}" \
            --team-id "${{ secrets.TEAM_ID }}"

          output=$(xcrun notarytool submit "JamfMigrationTool-${{ github.ref_name }}.pkg" --keychain-profile "notarytool-profile" --wait)
          echo "$output"

          if echo "$output" | grep -q "status: Accepted"; then
            echo "Notarization successful!"
            xcrun stapler staple "JamfMigrationTool-${{ github.ref_name }}.pkg"
            echo "NOTARIZATION_SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "Notarization failed or had issues."

            # Extract ID and log details if available
            extracted_id=$(echo "$output" | grep -o 'id: [^ ]*' | cut -d' ' -f2)
            if [ -n "$extracted_id" ]; then
              echo "ID: $extracted_id"
              xcrun notarytool log $extracted_id --keychain-profile "notarytool-profile"
            fi

            echo "NOTARIZATION_SUCCESS=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: JamfMigrationTool
          path: |
            build/Build/Products/Release/JamfMigrationTool
            JamfMigrationTool-${{ github.ref_name }}-unsigned.pkg
            ${{ steps.notarize.outputs.NOTARIZATION_SUCCESS == 'true' && 'JamfMigrationTool-' || '' }}${{ steps.notarize.outputs.NOTARIZATION_SUCCESS == 'true' && github.ref_name || '' }}${{ steps.notarize.outputs.NOTARIZATION_SUCCESS == 'true' && '.pkg' || '' }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: JamfMigrationTool

      - name: Check for notarized package
        id: check_notarized
        run: |
          if [ -f "JamfMigrationTool-${{ github.ref_name }}.pkg" ]; then
            echo "NOTARIZED_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "NOTARIZED_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release with both packages
        if: steps.check_notarized.outputs.NOTARIZED_EXISTS == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            JamfMigrationTool
            JamfMigrationTool-${{ github.ref_name }}-unsigned.pkg
            JamfMigrationTool-${{ github.ref_name }}.pkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release with unsigned package only
        if: steps.check_notarized.outputs.NOTARIZED_EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            JamfMigrationTool
            JamfMigrationTool-${{ github.ref_name }}-unsigned.pkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
